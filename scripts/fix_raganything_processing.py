#!/usr/bin/env python3
"""
Enhanced RAGAnything processing fix that extracts the actual markdown content
and processes images properly like the pt1232 example
"""

import os
import glob
import json
import asyncio
from pathlib import Path

async def get_proper_raganything_content(pdf_path: str, page_id: int, datasheet_id: int):
    """
    Get the actual processed markdown content from RAGAnything output directory
    """
    try:
        pdf_name = os.path.splitext(os.path.basename(pdf_path))[0]
        
        # Look for the actual markdown file generated by MinerU
        possible_paths = [
            f"output/{pdf_name}/auto/{pdf_name}.md",
            f"output/*/auto/{pdf_name}.md",
            f"{pdf_name}/auto/{pdf_name}.md",
            f"output/{pdf_name}/auto/*.md"
        ]
        
        markdown_file = None
        for pattern in possible_paths:
            found_files = glob.glob(pattern)
            if found_files:
                markdown_file = found_files[0]
                break
        
        if markdown_file and os.path.exists(markdown_file):
            print(f"Found markdown file: {markdown_file}")
            
            # Read the actual processed markdown content
            with open(markdown_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Find the images directory
            image_dir = os.path.join(os.path.dirname(markdown_file), 'images')
            
            image_files = []
            if os.path.exists(image_dir):
                image_files = [f for f in os.listdir(image_dir) 
                              if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
                print(f"Found {len(image_files)} images in {image_dir}")
            
            return {
                "content": content,
                "markdown_file": markdown_file,
                "image_dir": image_dir if os.path.exists(image_dir) else None,
                "image_files": image_files,
                "success": True
            }
        else:
            print(f"No markdown file found for {pdf_name}")
            return {"success": False, "error": "No markdown file found"}
            
    except Exception as e:
        print(f"Error getting RAGAnything content: {e}")
        return {"success": False, "error": str(e)}

async def upload_images_and_update_content(content: str, image_dir: str, image_files: list, 
                                         page_id: int, datasheet_id: int, upload_func):
    """
    Upload images to Supabase and update markdown content with new URLs
    """
    try:
        uploaded_images = []
        
        for image_file in image_files[:15]:  # Limit to 15 images
            image_path = os.path.join(image_dir, image_file)
            
            try:
                # Read image file
                with open(image_path, 'rb') as f:
                    image_data = f.read()
                
                # Upload to Supabase
                image_url = await upload_func(image_data, image_file, page_id, datasheet_id)
                
                if image_url:
                    uploaded_images.append({
                        "original_name": image_file,
                        "url": image_url
                    })
                    print(f"Uploaded {image_file} -> {image_url}")
                    
            except Exception as img_error:
                print(f"Failed to upload {image_file}: {img_error}")
        
        # Update content with Supabase URLs
        updated_content = content
        for img in uploaded_images:
            # Replace image references
            old_ref = f"images/{img['original_name']}"
            new_ref = img['url']
            updated_content = updated_content.replace(f"![](images/{img['original_name']})", f"![]({new_ref})")
            updated_content = updated_content.replace(f"![Alt text](images/{img['original_name']})", f"![Alt text]({new_ref})")
        
        print(f"Updated {len(uploaded_images)} image references in content")
        
        return updated_content, uploaded_images
        
    except Exception as e:
        print(f"Error uploading images: {e}")
        return content, []

if __name__ == "__main__":
    # Test the function
    import asyncio
    
    async def test():
        result = await get_proper_raganything_content("/tmp/test.pdf", 9272, 3356)
        print(json.dumps(result, indent=2))
    
    asyncio.run(test())